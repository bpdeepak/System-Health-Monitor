/* Main Layout & Containers */
.container {
  max-width: 1200px;
  margin: 20px auto;
  padding: 20px;
  background-color: var(--card-background); /* Use variable */
  border-radius: 12px;
  box-shadow: 0 4px 20px var(--shadow-light); /* Use variable */
}

/* Navbar Styles */
.navbar {
  background-color: var(--primary-blue); /* Use variable */
  padding: 15px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 10px var(--shadow-light); /* Use variable */
  margin-bottom: 30px;
}

.navbar-brand {
  color: var(--card-background); /* White for brand text */
  font-size: 1.8em;
  font-weight: bold;
  text-decoration: none;
}

.navbar-nav {
  list-style: none;
  display: flex;
  margin: 0;
  padding: 0;
}

.nav-item {
  margin-left: 25px;
}

.nav-link {
  color: var(--text-light); /* Light grey for nav links */
  text-decoration: none;
  font-size: 1.1em;
  transition: color 0.3s ease;
}

.nav-link:hover {
  color: var(--accent-light-blue); /* Bright blue on hover */
}

.logout-btn {
  background-color: var(--danger-red); /* Red for logout button */
  color: white;
  padding: 8px 15px;
  font-size: 0.9em;
  margin-left: 20px;
}

.logout-btn:hover {
  background-color: var(--danger-red-dark); /* Darker red on hover */
}

/* Auth Component Styles (Login/Register Forms) */
.auth-container {
  max-width: 450px;
  margin: 50px auto;
  padding: 40px;
  background-color: var(--card-background); /* Use variable */
  border-radius: 12px;
  box-shadow: 0 8px 25px var(--shadow-light); /* Use variable */
  text-align: center;
}

.auth-container h2 {
  color: var(--primary-blue); /* Use variable */
  margin-bottom: 30px;
  font-size: 2em;
}

.auth-form .form-group {
  margin-bottom: 25px;
  text-align: left;
}

.auth-form label {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
  color: var(--text-medium); /* Use variable */
  font-size: 0.95em;
}

.auth-form input[type="text"],
.auth-form input[type="password"],
.auth-form select {
  width: 100%;
  padding: 12px 15px;
  border: 1px solid var(--border-light); /* Use variable */
  border-radius: 8px;
  font-size: 1em;
  color: var(--text-dark); /* Use variable */
  transition: border-color 0.3s ease;
}

.auth-form input[type="text"]:focus,
.auth-form input[type="password"]:focus,
.auth-form select:focus {
  outline: none;
  border-color: var(--accent-light-blue); /* Use variable */
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
}

.btn-primary {
  background-color: var(--accent-light-blue); /* Use variable */
  color: white;
  width: 100%;
  padding: 12px 20px;
  font-size: 1.1em;
  font-weight: bold;
  margin-top: 15px;
}

.btn-primary:hover {
  background-color: var(--accent-dark-blue); /* Use variable */
}

.link-style {
  color: var(--accent-light-blue); /* Use variable */
  cursor: pointer;
  text-decoration: underline;
  transition: color 0.3s ease;
}

.link-style:hover {
  color: var(--accent-dark-blue); /* Use variable */
}

.success-message {
  color: var(--success-green-dark); /* Darker green */
  background-color: #e6ffee; /* Lighter background */
  border: 1px solid var(--success-green); /* Use variable */
  padding: 12px;
  border-radius: 8px;
  margin-top: 20px;
  font-weight: bold;
}

.error-message {
  color: var(--danger-red-dark); /* Darker red */
  background-color: #ffe6e6; /* Lighter background */
  border: 1px solid var(--danger-red); /* Use variable */
  padding: 12px;
  border-radius: 8px;
  margin-top: 20px;
  font-weight: bold;
}

/* Dashboard Styles */
.dashboard-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 25px;
  padding: 20px;
}

.latest-metrics-summary {
  background-color: var(--card-background); /* Use variable */
  border-radius: 10px;
  padding: 25px;
  box-shadow: 0 2px 15px var(--shadow-light); /* Use variable */
  grid-column: span 2; /* Spans across two columns if available */
  text-align: center;
}

.latest-metrics-summary h3 {
  color: var(--primary-blue); /* Use variable */
  margin-bottom: 20px;
  font-size: 1.6em;
}

.metric-grid {
    display: flex;
    justify-content: center;
    gap: 20px;
    flex-wrap: wrap;
}

.metric-card {
  background-color: var(--card-background); /* Use variable */
  border: 1px solid var(--border-light); /* Use variable */
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 15px;
  text-align: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  flex: 1;
  min-width: 180px;
  max-width: 250px;
}

.metric-label {
  font-size: 1.1em;
  color: var(--text-medium); /* Use variable */
  margin-bottom: 10px;
  font-weight: 500;
}

.metric-value {
  font-size: 2.2em;
  font-weight: bold;
  color: var(--primary-blue); /* Use variable */
}

/* --- NEW: Specific colors for metric values based on thresholds --- */
/* You would need to add a className like 'critical-value' to your React component
   if the metric exceeds a threshold (e.g., >90% CPU) */
.metric-value.critical {
  color: var(--danger-red); /* Red for critical values */
}
.metric-value.warning {
  color: var(--warning-orange); /* Orange for warning values */
}
.metric-value.normal {
  color: var(--success-green); /* Green for normal values */
}
/* --- END NEW --- */


/* Chart Card Styles */
.chart-card {
    background-color: var(--card-background); /* Use variable */
    border-radius: 10px;
    padding: 25px;
    box-shadow: 0 2px 15px var(--shadow-light); /* Use variable */
    margin-top: 20px;
}

/* Reports Page Styles */
.reports-container {
  padding: 20px;
}

.reports-container h2 {
  color: var(--primary-blue); /* Use variable */
  margin-bottom: 25px;
  font-size: 2em;
}

.filters {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 30px;
  background-color: var(--card-background); /* Use variable */
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 10px var(--shadow-light); /* Use variable */
  align-items: flex-end;
}

.filter-group {
  display: flex;
  flex-direction: column;
  flex: 1;
  min-width: 180px;
}

.filter-group label {
  margin-bottom: 8px;
  font-weight: bold;
  color: var(--text-medium); /* Use variable */
  font-size: 0.95em;
}

.filters input[type="text"],
.filters input[type="date"],
.filters select {
  padding: 10px 12px;
  border: 1px solid var(--border-light); /* Use variable */
  border-radius: 8px;
  font-size: 1em;
  color: var(--text-dark); /* Use variable */
  width: 100%;
  transition: border-color 0.3s ease;
}

.filters input[type="text"]:focus,
.filters input[type="date"]:focus,
.filters select:focus {
  outline: none;
  border-color: var(--accent-light-blue); /* Use variable */
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
}

.filters button {
  padding: 10px 25px;
  background-color: var(--accent-light-blue); /* Use accent blue for filter button */
  color: white;
  font-weight: bold;
  white-space: nowrap;
}

.filters button:hover {
  background-color: var(--accent-dark-blue); /* Darker blue on hover */
}

/* React Datepicker overrides for better styling */
.react-datepicker-wrapper {
  width: 100%;
}

.react-datepicker__input-container input {
  width: 100%;
}

/* Report Table Styles */
.report-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 25px;
  background-color: var(--card-background); /* Use variable */
  box-shadow: 0 2px 15px var(--shadow-light); /* Use variable */
  border-radius: 10px;
  overflow: hidden;
}

.report-table th,
.report-table td {
  padding: 15px 20px;
  text-align: left;
  border-bottom: 1px solid var(--border-light); /* Use variable */
}

.report-table th {
  background-color: #f2f4f6; /* Very light grey for headers */
  color: var(--text-medium); /* Use variable */
  font-weight: bold;
  text-transform: uppercase;
  font-size: 0.9em;
}

.report-table tbody tr:last-child td {
  border-bottom: none;
}

.report-table tbody tr:hover {
  background-color: #f5f5f5; /* Subtle hover effect */
}

/* --- NEW: Styling for the metric lists (CPU Usage Over Time etc.) --- */
.metric-list-item {
  color: var(--primary-blue); /* Consistent blue color */
  font-weight: 500;
  padding: 5px 0;
  transition: color 0.2s ease;
}

/* If you want to color-code based on value, you'd add classes in React like: */
/*
.metric-list-item.high-cpu { color: var(--danger-red); }
.metric-list-item.moderate-mem { color: var(--warning-orange); }
*/

/* Remove the random colors that were previously applied to the arrow/text */
.metric-list-item span {
  /* You might need to adjust your React component to not add inline styles
     or specific classes that generate random colors */
  color: inherit !important; /* Forces the color from parent if inline style was there */
  margin-right: 5px;
}

/* Table Styling (add this if not already present) */
.latest-metrics-table { /* The new class for your table */
  width: 100%;
  border-collapse: collapse;
  margin-top: 25px;
  background-color: var(--card-background);
  box-shadow: 0 2px 15px var(--shadow-light);
  border-radius: 10px;
  overflow: hidden; /* Ensures rounded corners */
}

.latest-metrics-table th,
.latest-metrics-table td {
  padding: 15px 20px;
  text-align: left;
  border-bottom: 1px solid var(--border-light);
}

.latest-metrics-table th {
  background-color: #f2f4f6; /* Very light grey for headers */
  color: var(--text-medium);
  font-weight: bold;
  text-transform: uppercase;
  font-size: 0.9em;
}

.latest-metrics-table tbody tr:last-child td {
  border-bottom: none;
}

.latest-metrics-table tbody tr:hover {
  background-color: #f5f5f5; /* Subtle hover effect */
}

/* Metric Value Colors in Table */
.metric-value.critical {
  color: var(--danger-red); /* Red for critical values */
  font-weight: bold;
}
.metric-value.warning {
  color: var(--warning-orange); /* Orange for warning values */
  font-weight: bold;
}
.metric-value.normal {
  color: var(--success-green); /* Green for normal values */
}
/* --- END NEW --- */


/* Admin Panel Styles */
.admin-panel-container {
  padding: 20px;
}

.admin-panel-container h2 {
  color: var(--primary-blue); /* Use variable */
  margin-bottom: 25px;
  font-size: 2em;
}

.user-management-section {
    background-color: var(--card-background); /* Use variable */
    border-radius: 10px;
    padding: 25px;
    box-shadow: 0 2px 15px var(--shadow-light); /* Use variable */
    margin-bottom: 30px;
}

.user-management-section h3 {
    color: var(--primary-blue); /* Use variable */
    margin-bottom: 20px;
    font-size: 1.6em;
}

.user-list {
    list-style: none;
    padding: 0;
}

.user-list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 0;
    border-bottom: 1px solid var(--border-light); /* Use variable */
}

.user-list-item:last-child {
    border-bottom: none;
}

.user-info span {
    font-size: 1.1em;
    color: var(--text-dark); /* Use variable */
    margin-right: 15px;
}

.user-info span strong {
    font-weight: bold;
    color: var(--primary-blue); /* Use variable */
}

.action-buttons button {
    margin-left: 10px;
    padding: 8px 15px;
    font-size: 0.9em;
}

.delete-btn {
    background-color: var(--danger-red); /* Use variable */
    color: white;
}

.delete-btn:hover {
    background-color: var(--danger-red-dark); /* Use variable */
}

.make-admin-btn {
    background-color: var(--warning-orange); /* Use variable */
    color: white;
}

.make-admin-btn:hover {
    background-color: var(--warning-orange-dark); /* Use variable */
}

/* Spinner Animation for Loading States */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-spinner {
  border: 4px solid #f3f3f3; /* Light grey */
  border-top: 4px solid var(--accent-light-blue); /* Use variable */
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 50px auto;
}